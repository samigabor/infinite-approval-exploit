// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract WETH is ERC20 {
    event Deposit(address indexed account, uint256 amount);
    event Withdraw(address indexed account, uint256 amount);

    constructor() ERC20("Wrapped Ether", "WETH") {}

    fallback() external payable {
        deposit();
    }

    // receive() external payable {
    //     deposit();
    // }

    function deposit() public payable {
        _mint(msg.sender, msg.value);
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external {
        _burn(msg.sender, amount);
        payable(msg.sender).transfer(amount);
        emit Withdraw(msg.sender, amount);
    }
}


// pragma solidity 0.8.25;

// import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

// contract WETH is ERC20 {
//     event Deposit(address indexed account, uint256 amount);
//     event Withdraw(address indexed account, uint256 amount);

//     constructor() ERC20("Wrapped Ether", "WETH", 18) {}

//     fallback() external payable {
//         deposit();
//     }

//     function deposit() public payable {
//         _mint(msg.sender, msg.value);
//         emit Deposit(msg.sender, msg.value);
//     }

//     function withdraw(uint256 amount) external {
//         _burn(msg.sender, amount);
//         payable(msg.sender).transfer(amount);
//         emit Withdraw(msg.sender, amount);
//     }
// }

// // contract WETH9 {
// //     string public name     = "Wrapped Ether";
// //     string public symbol   = "WETH";
// //     uint8  public decimals = 18;

// //     event  Approval(address indexed src, address indexed guy, uint wad);
// //     event  Transfer(address indexed src, address indexed dst, uint wad);
// //     event  Deposit(address indexed dst, uint wad);
// //     event  Withdrawal(address indexed src, uint wad);

// //     mapping (address => uint)                       public  balanceOf;
// //     mapping (address => mapping (address => uint))  public  allowance;

// //     function() public payable {
// //         deposit();
// //     }
// //     function deposit() public payable {
// //         balanceOf[msg.sender] += msg.value;
// //         Deposit(msg.sender, msg.value);
// //     }
// //     function withdraw(uint wad) public {
// //         require(balanceOf[msg.sender] >= wad);
// //         balanceOf[msg.sender] -= wad;
// //         msg.sender.transfer(wad);
// //         Withdrawal(msg.sender, wad);
// //     }

// //     function totalSupply() public view returns (uint) {
// //         return this.balance;
// //     }

// //     function approve(address guy, uint wad) public returns (bool) {
// //         allowance[msg.sender][guy] = wad;
// //         Approval(msg.sender, guy, wad);
// //         return true;
// //     }

// //     function transfer(address dst, uint wad) public returns (bool) {
// //         return transferFrom(msg.sender, dst, wad);
// //     }

// //     function transferFrom(address src, address dst, uint wad)
// //         public
// //         returns (bool)
// //     {
// //         require(balanceOf[src] >= wad);

// //         if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {
// //             require(allowance[src][msg.sender] >= wad);
// //             allowance[src][msg.sender] -= wad;
// //         }

// //         balanceOf[src] -= wad;
// //         balanceOf[dst] += wad;

// //         Transfer(src, dst, wad);

// //         return true;
// //     }
// // }