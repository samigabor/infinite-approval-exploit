// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract Bank {
    address public immutable token;
    mapping(address => uint256) public balanceOf;

    constructor(address _token) {
        token = _token;
    }

    function deposit(uint256 _amount) external {
        IERC20(token).transferFrom(msg.sender, address(this), _amount);
        balanceOf[msg.sender] += _amount;
    }

    function depositWithPermit(
        address owner,
        address spender, // attacker can pass hiself as the `spender`. THis should NOT be added as a param
        uint256 amount,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external {
        IERC20Permit(token).permit(owner, spender, amount, deadline, v, r, s); // should use address(this) as `spender` param
        IERC20(token).transferFrom(owner, address(this), amount);
        balanceOf[spender] += amount;
    }

    function withdraw(uint256 _amount) external {
        balanceOf[msg.sender] -= _amount;
        IERC20(token).transfer(msg.sender, _amount);
    }
}